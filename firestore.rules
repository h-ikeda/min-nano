rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /inspectors/{uid} {
      allow read: if request.auth != null;
    }

    match /properties/{propertyId} {

      function isValid() {
        return request.resource.data.keys().hasOnly(['name', 'permissions'])
          && request.resource.data.keys().hasAll(['name', 'permissions'])
          && request.resource.data.name is string
          && request.resource.data.name != ''
          && request.resource.data.permissions is map
          && request.resource.data.permissions.keys().hasOnly(['read', 'update'])
          && request.resource.data.permissions.keys().hasAll(['read', 'update'])
          && request.resource.data.permissions.read is list
          && request.resource.data.permissions.update is list;
      }

      allow read: if request.auth != null
        && request.auth.uid in resource.data.permissions.read;
      allow create: if request.auth != null
        && isValid();
      allow update: if request.auth != null
        && request.auth.uid in resource.data.permissions.update
        && isValid();
      
      match /messages/{messageId} {
        allow read: if false;
      }

      match /documents/{documentId} {
        allow read: if false;
      }
    }

    match /inspectionApplications/{inspectionApplication} {
      allow create: if request.auth.uid == request.resource.data.applicant && request.resource.data.status != 'submitted'
      allow read: if request.auth.uid == resource.data.applicant || request.auth.token.admin == true
      function isValid() {
        return getAfter(/databases/$(database)/documents/mail/$(inspectionApplication)) != null
      }
      allow update: if request.auth.uid == resource.data.applicant && resource.data.status != 'submitted' && (request.resource.data.status != 'submitted' || isValid())
    }

    match /mail/{inspectionApplication} {
      allow create: if getAfter(/databases/$(database)/documents/inspectionApplications/$(inspectionApplication)).data.status == 'submitted' && request.resource.data.toUids.hasOnly(['administrator'])
    }

  }
}
